import React from 'react'
import { Button } from './ui/button'
import { Input } from './ui/input'
import { Textarea } from './ui/textarea'
import { Checkbox } from './ui/checkbox'
import { Slider } from './ui/slider'
import { Badge } from './ui/badge'
import { Settings, Clock, Volume2, Loader2, PlayCircle, MessageSquare, Gauge, TrendingUp } from 'lucide-react'
import { Scene, ProjectSettings } from '../types'
import { calculateSceneDuration, formatDuration, getVideoSpeedLabel, getVideoSpeedMultiplier } from '../utils/helpers'
import { getTTSModeDisplay } from '../utils/tts'

interface SceneEditorProps {
  selectedScene: Scene | undefined
  updateSceneText: (id: string, text: string) => void
  updateSceneTitle: (id: string, title: string) => void
  updateSceneDescription: (id: string, description: string) => void
  updateSceneNarratorDescription: (id: string, description: string) => void
  updateSceneSpeed: (id: string, speed: number) => void
  toggleSceneCompleted: (id: string) => void
  generateTTS: (id: string) => void
  projectSettings: ProjectSettings
  isTTSLoading: boolean
  playAudio: (audioUrl: string) => void
}

export const SceneEditor: React.FC<SceneEditorProps> = ({
  selectedScene,
  updateSceneText,
  updateSceneTitle,
  updateSceneDescription,
  updateSceneNarratorDescription,
  updateSceneSpeed,
  toggleSceneCompleted,
  generateTTS,
  projectSettings,
  isTTSLoading,
  playAudio
}) => {

  if (!selectedScene) {
    return (
      <div className="flex-1 p-6 bg-background">
        <div className="flex items-center justify-center h-full text-muted-foreground">
          <div className="text-center">
            <Settings className="h-12 w-12 mx-auto mb-4" />
            <p>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="flex-1 p-6 bg-background">
      <div className="space-y-6">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <label className="block text-sm font-medium mb-2">
              –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
            </label>
            <Input
              value={selectedScene.title}
              onChange={(e) => updateSceneTitle(selectedScene.id, e.target.value)}
              className="text-lg"
            />
          </div>
          <div className="ml-4 flex flex-col items-end gap-4">
            <div className="text-right">
              <label className="block text-sm font-medium mb-2 text-muted-foreground">
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
              </label>
              <div className="flex items-center gap-2 text-lg font-medium">
                <Clock className="h-4 w-4" />
                <span className={selectedScene.audioDuration !== null ? 'text-green-600' : 'text-primary'}>
                  {calculateSceneDuration(selectedScene)}
                </span>
              </div>
              {selectedScene.audioDuration !== null && (
                <p className="text-xs text-green-600 mt-1">
                  –†–µ–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∑–≤—É—á–∫–∏
                </p>
              )}
              {selectedScene.audioDuration === null && selectedScene.text && (
                <p className="text-xs text-muted-foreground mt-1">
                  –†–∞—Å—á–µ—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                </p>
              )}
            </div>
            
            <div className="flex items-center space-x-2">
              <Checkbox 
                id={`complete-${selectedScene.id}`}
                checked={selectedScene.isCompleted}
                onCheckedChange={() => toggleSceneCompleted(selectedScene.id)}
              />
              <label 
                htmlFor={`complete-${selectedScene.id}`}
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              >
                –°—Ü–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞
              </label>
            </div>
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">
            –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
          </label>
          <Input
            value={selectedScene.description}
            onChange={(e) => updateSceneDescription(selectedScene.id, e.target.value)}
            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤ —Å—Ü–µ–Ω–µ"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">
            –¢–µ–∫—Å—Ç –æ–∑–≤—É—á–∫–∏
          </label>
          <Textarea
            value={selectedScene.text}
            onChange={(e) => updateSceneText(selectedScene.id, e.target.value)}
            rows={8}
            className="resize-none"
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ —ç—Ç–æ–π —Å—Ü–µ–Ω—ã..."
          />
          <div className="flex items-center justify-between text-xs text-muted-foreground mt-1">
            <span>
              –°–ª–æ–≤: {selectedScene.text.trim().split(/\s+/).filter(word => word.length > 0).length}
            </span>
            {selectedScene.audioDuration === null && (
              <span>
                –†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {calculateSceneDuration(selectedScene)}
              </span>
            )}
          </div>
        </div>

        {/* Narrator Description for Scene */}
        <div>
          <div className="flex items-center gap-2 mb-2">
            <MessageSquare className="h-4 w-4 text-orange-500" />
            <label className="text-sm font-medium">
              –û–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∫—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π —Å—Ü–µ–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            </label>
          </div>
          <Textarea
            value={selectedScene.narratorDescription}
            onChange={(e) => updateSceneNarratorDescription(selectedScene.id, e.target.value)}
            rows={2}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≥–æ–≤–æ—Ä–∏—Ç—å –±—ã—Å—Ç—Ä–µ–µ –∏ –≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å"
            className="resize-none"
          />
          <p className="text-xs text-muted-foreground mt-1">
            üí° –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∑–≤—É—á–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
          </p>
        </div>

        {/* Video Speed Control Section */}
        <div className="space-y-4">
          <div className="border rounded-lg p-4 bg-muted/50">
            <label className="block text-sm font-medium mb-3">
              –°–∫–æ—Ä–æ—Å—Ç—å –≤–∏–¥–µ–æ
            </label>
            
            {/* Recommended Speed Display */}
            {selectedScene.recommendedSpeed && (
              <div className="flex items-center gap-2 mb-3 p-2 bg-green-50 dark:bg-green-950/30 rounded text-sm text-green-700 dark:text-green-300">
                <TrendingUp className="h-4 w-4" />
                <span>
                  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {getVideoSpeedMultiplier(selectedScene.recommendedSpeed).toFixed(1)}x 
                  ({getVideoSpeedLabel(selectedScene.recommendedSpeed)})
                </span>
              </div>
            )}

            {/* Speed Slider */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm text-muted-foreground">–¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–∏–¥–µ–æ:</span>
                <div className="flex items-center gap-2">
                  <Gauge className="h-4 w-4 text-orange-500" />
                  <span className="font-medium">{getVideoSpeedMultiplier(selectedScene.speed).toFixed(1)}x</span>
                  <span className="text-sm text-muted-foreground">({getVideoSpeedLabel(selectedScene.speed)})</span>
                </div>
              </div>
              
              <Slider
                value={[selectedScene.speed]}
                onValueChange={(value) => updateSceneSpeed(selectedScene.id, value[0])}
                min={1}
                max={10}
                step={1}
                className="w-full"
              />
              
              <div className="flex justify-between text-xs text-muted-foreground">
                <span>1 - –ó–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ (0.5x)</span>
                <span>5 - –ù–æ—Ä–º–∞–ª—å–Ω–∞—è (1x)</span>
                <span>10 - –£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ (2x)</span>
              </div>
              
              <p className="text-xs text-muted-foreground">
                üí° –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Ä–æ–ª–∏–∫–µ
              </p>
            </div>
          </div>
        </div>

        <div>
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-2">
              <label className="block text-sm font-medium">
                –û–∑–≤—É—á–∫–∞
              </label>
              <Badge variant="outline" className="text-xs">
                {getTTSModeDisplay(projectSettings.ttsSettings)}
              </Badge>
            </div>
            <Button
              onClick={() => generateTTS(selectedScene.id)}
              disabled={isTTSLoading || !selectedScene.text.trim()}
              size="sm"
            >
              {isTTSLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...
                </>
              ) : (
                <>
                  <Volume2 className="mr-2 h-4 w-4" />
                  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–∑–≤—É—á–∫—É
                </>
              )}
            </Button>
          </div>
          
          {selectedScene.audioUrl ? (
            <div className={`p-4 rounded-lg ${selectedScene.isAudioDemo ? 'bg-yellow-50 dark:bg-yellow-950/30' : 'bg-green-50 dark:bg-green-950/30'}`}>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Volume2 className={`h-4 w-4 ${selectedScene.isAudioDemo ? 'text-yellow-600' : 'text-green-600'}`} />
                  <span className={`text-sm ${selectedScene.isAudioDemo ? 'text-yellow-700 dark:text-yellow-300' : 'text-green-700 dark:text-green-300'}`}>
                    {selectedScene.isAudioDemo ? '–î–µ–º–æ –æ–∑–≤—É—á–∫–∞ –≥–æ—Ç–æ–≤–∞' : '–û–∑–≤—É—á–∫–∞ –≥–æ—Ç–æ–≤–∞ (ElevenLabs)'}
                  </span>
                  {selectedScene.audioDuration && (
                    <span className={`text-sm ${selectedScene.isAudioDemo ? 'text-yellow-600' : 'text-green-600'}`}>
                      ({formatDuration(selectedScene.audioDuration)})
                    </span>
                  )}
                  {selectedScene.isAudioDemo && (
                    <Badge variant="outline" className="text-xs text-yellow-700 border-yellow-300">
                      –î–ï–ú–û
                    </Badge>
                  )}
                </div>
                <Button 
                  size="sm" 
                  variant="outline"
                  onClick={() => selectedScene.audioUrl && playAudio(selectedScene.audioUrl)}
                  disabled={!selectedScene.audioUrl}
                >
                  <PlayCircle className="mr-2 h-4 w-4" />
                  –ü—Ä–æ—Å–ª—É—à–∞—Ç—å
                </Button>
              </div>
              {selectedScene.isAudioDemo && (
                <p className="text-xs text-yellow-600 mt-2">
                  ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–≤—É–∫. –í–∫–ª—é—á–∏—Ç–µ ElevenLabs –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è AI –æ–∑–≤—É—á–∫–∏.
                </p>
              )}
            </div>
          ) : (
            <div className="p-4 bg-muted rounded-lg">
              <p className="text-sm text-muted-foreground">
                –û–∑–≤—É—á–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–∑–≤—É—á–∫—É".
              </p>
              <p className="text-xs text-muted-foreground mt-2">
                üí° –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ TTS
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}