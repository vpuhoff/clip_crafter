import React from 'react'
import { Button } from './ui/button'
import { Separator } from './ui/separator'
import { Upload, Eye, Trash2, Image, Video, Headphones } from 'lucide-react'
import { Scene, MediaFile } from '../types'
import { MAX_FILE_SIZE } from '../constants'
import { toast } from 'sonner'

interface MediaPanelProps {
  selectedScene: Scene | undefined
  uploadMedia: (sceneId: string, file: File) => void
  removeMedia: (sceneId: string, fileName: string) => void
  openMediaPreview: (media: MediaFile) => void
}

export const MediaPanel: React.FC<MediaPanelProps> = ({
  selectedScene,
  uploadMedia,
  removeMedia,
  openMediaPreview
}) => {
  const handleFileUpload = (sceneId: string, event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      // Check file size (max 10MB)
      if (file.size > MAX_FILE_SIZE) {
        toast.error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10–ú–ë')
        return
      }
      uploadMedia(sceneId, file)
    }
  }

  const getMediaTypeLabel = (type: string) => {
    switch (type) {
      case 'image': return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
      case 'video': return '–í–∏–¥–µ–æ'
      case 'audio': return '–ê—É–¥–∏–æ'
      default: return '–§–∞–π–ª'
    }
  }

  const renderMediaIcon = (media: MediaFile) => {
    switch (media.type) {
      case 'image':
        return (
          <div className="relative w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded overflow-hidden">
            <img 
              src={media.url} 
              alt={media.originalName}
              className="w-full h-full object-cover"
              onError={(e) => {
                // Fallback to icon if image fails to load
                e.currentTarget.style.display = 'none'
              }}
            />
            <Image className="absolute inset-0 m-auto h-6 w-6 text-blue-500" />
          </div>
        )
      case 'video':
        return (
          <div className="w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded flex items-center justify-center">
            <Video className="h-6 w-6 text-purple-500" />
          </div>
        )
      case 'audio':
        return (
          <div className="w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded flex items-center justify-center">
            <Headphones className="h-6 w-6 text-green-500" />
          </div>
        )
      default:
        return (
          <div className="w-12 h-12 bg-gray-100 dark:bg-gray-900/30 rounded flex items-center justify-center">
            <Upload className="h-6 w-6 text-gray-500" />
          </div>
        )
    }
  }

  return (
    <div className="w-80 bg-card border-l">
      <div className="p-4 border-b">
        <h2 className="font-semibold">–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã</h2>
      </div>
      
      {selectedScene ? (
        <div className="p-4 space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">
              –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã
            </label>
            <input
              type="file"
              accept="image/*,video/*"
              onChange={(e) => handleFileUpload(selectedScene.id, e)}
              className="hidden"
              id="media-upload"
            />
            <label
              htmlFor="media-upload"
              className="flex items-center justify-center w-full p-4 border-2 border-dashed border-border rounded-lg cursor-pointer hover:border-primary transition-colors"
            >
              <div className="text-center">
                <Upload className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                <p className="text-sm text-foreground">
                  –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                </p>
                <p className="text-xs text-muted-foreground">
                  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ (–º–∞–∫—Å. 10–ú–ë)
                </p>
              </div>
            </label>
          </div>

          {selectedScene.media.length > 0 && (
            <div>
              <label className="block text-sm font-medium mb-2">
                –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({selectedScene.media.length})
              </label>
              <div className="space-y-2">
                {selectedScene.media.map((media) => (
                  <div
                    key={media.fileName}
                    className="flex items-center gap-3 p-3 bg-muted rounded-lg"
                  >
                    {/* Media Preview Thumbnail */}
                    <div className="flex-shrink-0">
                      {renderMediaIcon(media)}
                    </div>

                    {/* File Info */}
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium truncate" title={media.originalName}>
                        {media.originalName || media.fileName.split('-').slice(2).join('-')}
                      </p>
                      <p className="text-xs text-muted-foreground">
                        {getMediaTypeLabel(media.type)}
                      </p>
                    </div>

                    {/* Action Buttons */}
                    <div className="flex items-center gap-1">
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => openMediaPreview(media)}
                        className="p-1.5 h-auto"
                      >
                        <Eye className="h-4 w-4 text-primary" />
                      </Button>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => removeMedia(selectedScene.id, media.fileName)}
                        className="p-1.5 h-auto"
                      >
                        <Trash2 className="h-4 w-4 text-destructive" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          <Separator />

          <div className="text-xs text-muted-foreground space-y-1">
            <p>üí° –°–æ–≤–µ—Ç—ã:</p>
            <p>‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è TTS</p>
            <p>‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ TTS —Ä–µ–∂–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: ElevenLabs AI –∏–ª–∏ –î–µ–º–æ</p>
            <p>‚Ä¢ –ù–æ–≤–∞—è —Å—Ü–µ–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π</p>
            <p>‚Ä¢ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—Ü–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞</p>
            <p>‚Ä¢ –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ - —Ä–µ–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∑–≤—É—á–∫–∏</p>
            <p>‚Ä¢ –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –æ–∑–≤—É—á–∫–∏ - –¥–µ–º–æ —Ä–µ–∂–∏–º</p>
            <p>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ–∫–±–æ–∫—Å "–°—Ü–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞" –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</p>
            <p>‚Ä¢ –ò–∫–æ–Ω–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∞—Ç—É—Å: üéµ –æ–∑–≤—É—á–∫–∞, üí¨ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∫—Ç–æ—Ä–∞, üñº —Ñ–æ—Ç–æ, üìπ –≤–∏–¥–µ–æ, üìä —Å–∫–æ—Ä–æ—Å—Ç—å</p>
            <p>‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã (0.5x - 2x)</p>
            <p>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∑–≤—É—á–∫–∏</p>
            <p>‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–∏–∫—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω</p>
            <p>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –≥–ª–∞–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤</p>
            <p>‚Ä¢ ElevenLabs –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–∑–≤—É—á–∫–∏</p>
            <p>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, MP4, MOV, AVI</p>
            <p>‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10–ú–ë</p>
            <p>‚Ä¢ –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –æ–∑–≤—É—á–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã</p>
          </div>
        </div>
      ) : (
        <div className="flex items-center justify-center h-32 text-muted-foreground">
          <p className="text-sm">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω—É</p>
        </div>
      )}
    </div>
  )
}